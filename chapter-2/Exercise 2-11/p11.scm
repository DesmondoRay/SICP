(define (make-interval a b) (cons a b))

(define (upper-bound a)
  (max (car a) (cdr a)))

(define (lower-bound a)
  (min (car a) (cdr a)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (if (> (lower-bound x) 0)  
      (if (> (lower-bound y) 0)  
      (make-interval (* (lower-bound x) (lower-bound y)) (* (upper-bound x) (upper-bound y)))  
      (if (> (upper-bound y) 0)  
          (make-interval (* (upper-bound x) (lower-bound y)) (* (upper-bound x) (upper-bound y)))  
          (make-interval (* (lower-bound x) (upper-bound y)) (* (lower-bound x) (upper-bound y)))))  
      (if (> (upper-bound x) 0)  
      (if (> (lower-bound y) 0)  
          (make-interval (* (lower-bound x) (upper-bound y)) (* (upper-bound x) (upper-bound y)))  
          (if (> (upper-bound y) 0)  
          (make-interval (* (lower-bound x) (lower-bound y))   
                 (* (upper-bound x) (upper-bound y)))  
          (make-interval (* (lower-bound x) (lower-bound y))  
                 (* (upper-bound x) (upper-bound y)))))  
      (if (> (lower-bound y) 0)  
          (make-interval (* (lower-bound x) (lower-bound y)) (* (upper-bound x) (upper-bound y)))  
          (if (> (upper-bound y) 0)  
          (make-interval (* (lower-bound x) (lower-bound y))   
                 (* (upper-bound x) (upper-bound y)))  
          (make-interval (* (lower-bound x) (lower-bound y))   
                 (* (upper-bound x) (upper-bound y))))) )))

(define (div-interval x y)
  (if (or (= (lower-bound y) 0) (= (upper-bound y) 0))
      (error "divide by 0")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))